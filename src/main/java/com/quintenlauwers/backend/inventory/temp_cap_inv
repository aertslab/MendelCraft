private final IItemHandler handler;

    public static final int SIZE = 3;

    public InventoryItem(IItemHandler handler) {
        this.handler = handler;
    }

    @Override
    public int getSizeInventory() {
        return (SIZE);
    }

    @Override
    public ItemStack getStackInSlot(int index) {
        return handler.getStackInSlot(index);
    }

    @Nullable
    @Override
    public ItemStack decrStackSize(int index, int count) {
        return handler.extractItem(index, count, false);
    }

    @Nullable
    @Override
    public ItemStack removeStackFromSlot(int index) {
        return handler.extractItem(index, 64, false);
    }

    @Override
    public void setInventorySlotContents(int index, @Nullable ItemStack stack) {
        handler.insertItem(index, stack, false);

    }

    @Override
    public int getInventoryStackLimit() {
        return 1;
    }

    @Override
    public void markDirty() {
    }

    @Override
    public boolean isUseableByPlayer(EntityPlayer player) {
        return true;
        // TODO: check what false does
    }

    @Override
    public void openInventory(EntityPlayer player) {

    }

    @Override
    public void closeInventory(EntityPlayer player) {

    }

    @Override
    public boolean isItemValidForSlot(int indstackex, ItemStack stack) {
        return (stack != null && stack.getItem() instanceof dnaSyringe);
    }

    @Override
    public int getField(int id) {
        return 0;
    }

    @Override
    public void setField(int id, int value) {

    }

    @Override
    public int getFieldCount() {
        return 0;
    }

    @Override
    public void clear() {
        for (int i = 0; i < SIZE; i++) {
            removeStackFromSlot(i);
        }
    }

        @Override
    public String getName() {
        return null;
    }

    @Override
    public boolean hasCustomName() {
        return false;
    }

    @Override
    public ITextComponent getDisplayName() {
        return null;
    }