#!/usr/bin/env python

import json
import sys

with open("chickenReference.json") as F:
    j = json.load(F)

traits = set(j.keys())
effects = dict([(x, set(j[x]['effects'].keys())) for x in traits])

genome = {}
g = genome

if len(sys.argv) > 1:
    command = sys.argv[1]
else:
    command = 'boring'


def add_trait(g, name, chromosome, gene, codon, alleles, effects):
    g[name] = {}
    g[name]['codonsInvolved'] = []
    g[name]['allelesInvolved'] = {}
    g[name]['effects'] = {}

    if isinstance(alleles, str):
        alleles = dict([(b, list(set(c.split('/')))) for b, c in [a.split(':') for a in alleles.split()]])
    if isinstance(effects, str):
        effects = dict([a.split(':') for a in effects.split()])

    for a, seqs in alleles.items():
        g[name]['codonsInvolved'].append(
            dict(
                chromosome=chromosome, gene=gene, codon=codon, allele=a))
        g[name]['allelesInvolved'][a] = list(seqs)

    for allele, effect in effects.items():
        if not effect in g[name]['effects']:
            g[name]['effects'][effect] = []
        g[name]['effects'][effect].append(allele)

t = add_trait

if command == 'overview':
    for i, trait in enumerate(traits):
        effectlist = list(sorted(effects[trait]))
        print(trait+ "\t" + " ".join(effectlist))
elif command == 'template':
    for i, trait in enumerate(sorted(traits)):
        effectlist = list(sorted(effects[trait]))
        ea = effectlist[-1]
        eb = effectlist[0]
        ec = effectlist[1]

        print('t(g, %-16s, 0, 0,%2d, "A:AAA/ACC B:TTC/GGA", "AA:%s AB:%s BB:%s")' % (
            '"' + trait + '"', i, ea, eb, ec))
elif command == 'production':
    t(g, "bodyColor"     , 0, 0, 0,  "A:ACT B:GGC", "AA:black AB:black BB:white")
    t(g, "billColor"     , 0, 0, 0,  "A:ACT B:GGC", "AA:black AB:black BB:white")
    t(g, "chinColor"     , 0, 0, 0,  "A:ACT B:GGC", "AA:black AB:black BB:white")
    t(g, "leftLegColor"  , 0, 0, 0,  "A:ACT B:GGC", "AA:black AB:black BB:white")
    t(g, "rightLegColor" , 0, 0, 0,  "A:ACT B:GGC", "AA:black AB:black BB:white")
    t(g, "leftWingColor" , 0, 0, 0,  "A:ACT B:GGC", "AA:black AB:black BB:white")
    t(g, "rightWingColor", 0, 0, 0,  "A:ACT B:GGC", "AA:black AB:black BB:white")
    t(g, "headColor"     , 0, 0, 1,  "A:GCA B:GCT", "AA:white AB:white BB:black")

    t(g, "bloodColor"    , 1, 0, 3, "A:AAA/GGA B:TTC", "AA:yellowblood AB:greenblood BB:blueblood")

    t(g, "bodyDino"      , 2, 0, 0, "A:CAA B:GCG", "AA:normal AB:normal BB:dino")
    t(g, "headDino"      , 2, 0, 0, "A:CAA B:GCG", "AA:normal AB:normal BB:dino")
    t(g, "leftWingDino"  , 2, 0, 1, "A:ATG B:TTA", "AA:normal AB:normal BB:dino")
    t(g, "rightWingDino" , 2, 0, 1, "A:ATG B:TTA", "AA:normal AB:normal BB:dino")
    t(g, "rightLegDino"  , 2, 0, 2, "A:GGC B:GGG", "AA:normal AB:normal BB:dino")
    t(g, "leftLegDino"   , 2, 0, 2, "A:GGC B:GGG", "AA:normal AB:normal BB:dino")
    t(g, "size"          , 2, 0, 3, "A:AAA B:CGA", "AA:normal AB:normal BB:big")

    t(g, "handicap"      , 3, 0, 3, "A:ATA B:TTC", "AA:normal AB:normal BB:handicapped")

elif command == 'boring':
    for i, trait in enumerate(traits):
        effectlist = list(sorted(effects[trait]))
        add_trait(genome, trait, 0, 0, i,
            alleles=dict(A=('AAA', ) ),
            effects=dict(AA=effectlist[-1])
            )

print(json.dumps(genome, sort_keys=True, indent=2))
